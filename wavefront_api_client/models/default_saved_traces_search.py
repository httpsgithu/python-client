# coding: utf-8

"""
    Wavefront REST API Documentation

    <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>  # noqa: E501

    OpenAPI spec version: v2
    Contact: chitimba@wavefront.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.configuration import Configuration


class DefaultSavedTracesSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_search_id': 'str',
        'user_setting': 'bool'
    }

    attribute_map = {
        'default_search_id': 'defaultSearchId',
        'user_setting': 'userSetting'
    }

    def __init__(self, default_search_id=None, user_setting=None, _configuration=None):  # noqa: E501
        """DefaultSavedTracesSearch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._default_search_id = None
        self._user_setting = None
        self.discriminator = None

        if default_search_id is not None:
            self.default_search_id = default_search_id
        if user_setting is not None:
            self.user_setting = user_setting

    @property
    def default_search_id(self):
        """Gets the default_search_id of this DefaultSavedTracesSearch.  # noqa: E501


        :return: The default_search_id of this DefaultSavedTracesSearch.  # noqa: E501
        :rtype: str
        """
        return self._default_search_id

    @default_search_id.setter
    def default_search_id(self, default_search_id):
        """Sets the default_search_id of this DefaultSavedTracesSearch.


        :param default_search_id: The default_search_id of this DefaultSavedTracesSearch.  # noqa: E501
        :type: str
        """

        self._default_search_id = default_search_id

    @property
    def user_setting(self):
        """Gets the user_setting of this DefaultSavedTracesSearch.  # noqa: E501


        :return: The user_setting of this DefaultSavedTracesSearch.  # noqa: E501
        :rtype: bool
        """
        return self._user_setting

    @user_setting.setter
    def user_setting(self, user_setting):
        """Sets the user_setting of this DefaultSavedTracesSearch.


        :param user_setting: The user_setting of this DefaultSavedTracesSearch.  # noqa: E501
        :type: bool
        """

        self._user_setting = user_setting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DefaultSavedTracesSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefaultSavedTracesSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DefaultSavedTracesSearch):
            return True

        return self.to_dict() != other.to_dict()
