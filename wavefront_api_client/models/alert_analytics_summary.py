# coding: utf-8

"""
    Tanzu Observability REST API Documentation

    <p>The REST API enables you to interact with the Tanzu Observability service by using standard REST API tools. You can use the REST API to automate commonly executed operations, for example to tag sources automatically.</p><p>When you make REST API calls outside the REST API documentation UI, to authenticate to the service, you must use an API token associated with a user account or a service account. For information on how to get the API token and examples, see <a href=\"http://docs.wavefront.com/using_wavefront_api.html\">Use the Tanzu Observability REST API.</a></p>  # noqa: E501

    OpenAPI spec version: v2
    Contact: chitimba@wavefront.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.configuration import Configuration


class AlertAnalyticsSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_active_no_target': 'int',
        'total_evaluated': 'int',
        'total_failed': 'int',
        'total_no_data': 'int'
    }

    attribute_map = {
        'total_active_no_target': 'totalActiveNoTarget',
        'total_evaluated': 'totalEvaluated',
        'total_failed': 'totalFailed',
        'total_no_data': 'totalNoData'
    }

    def __init__(self, total_active_no_target=None, total_evaluated=None, total_failed=None, total_no_data=None, _configuration=None):  # noqa: E501
        """AlertAnalyticsSummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_active_no_target = None
        self._total_evaluated = None
        self._total_failed = None
        self._total_no_data = None
        self.discriminator = None

        if total_active_no_target is not None:
            self.total_active_no_target = total_active_no_target
        if total_evaluated is not None:
            self.total_evaluated = total_evaluated
        if total_failed is not None:
            self.total_failed = total_failed
        if total_no_data is not None:
            self.total_no_data = total_no_data

    @property
    def total_active_no_target(self):
        """Gets the total_active_no_target of this AlertAnalyticsSummary.  # noqa: E501


        :return: The total_active_no_target of this AlertAnalyticsSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_active_no_target

    @total_active_no_target.setter
    def total_active_no_target(self, total_active_no_target):
        """Sets the total_active_no_target of this AlertAnalyticsSummary.


        :param total_active_no_target: The total_active_no_target of this AlertAnalyticsSummary.  # noqa: E501
        :type: int
        """

        self._total_active_no_target = total_active_no_target

    @property
    def total_evaluated(self):
        """Gets the total_evaluated of this AlertAnalyticsSummary.  # noqa: E501


        :return: The total_evaluated of this AlertAnalyticsSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_evaluated

    @total_evaluated.setter
    def total_evaluated(self, total_evaluated):
        """Sets the total_evaluated of this AlertAnalyticsSummary.


        :param total_evaluated: The total_evaluated of this AlertAnalyticsSummary.  # noqa: E501
        :type: int
        """

        self._total_evaluated = total_evaluated

    @property
    def total_failed(self):
        """Gets the total_failed of this AlertAnalyticsSummary.  # noqa: E501


        :return: The total_failed of this AlertAnalyticsSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_failed

    @total_failed.setter
    def total_failed(self, total_failed):
        """Sets the total_failed of this AlertAnalyticsSummary.


        :param total_failed: The total_failed of this AlertAnalyticsSummary.  # noqa: E501
        :type: int
        """

        self._total_failed = total_failed

    @property
    def total_no_data(self):
        """Gets the total_no_data of this AlertAnalyticsSummary.  # noqa: E501


        :return: The total_no_data of this AlertAnalyticsSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_no_data

    @total_no_data.setter
    def total_no_data(self, total_no_data):
        """Sets the total_no_data of this AlertAnalyticsSummary.


        :param total_no_data: The total_no_data of this AlertAnalyticsSummary.  # noqa: E501
        :type: int
        """

        self._total_no_data = total_no_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertAnalyticsSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertAnalyticsSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertAnalyticsSummary):
            return True

        return self.to_dict() != other.to_dict()
