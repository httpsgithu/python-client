# coding: utf-8

"""
    Tanzu Observability REST API Documentation

    <p>The REST API enables you to interact with the Tanzu Observability service by using standard REST API tools. You can use the REST API to automate commonly executed operations, for example to tag sources automatically.</p><p>When you make REST API calls outside the REST API documentation UI, to authenticate to the service, you must use an API token associated with a user account or a service account. For information on how to get the API token and examples, see <a href=\"http://docs.wavefront.com/using_wavefront_api.html\">Use the Tanzu Observability REST API.</a></p>  # noqa: E501

    OpenAPI spec version: v2
    Contact: chitimba@wavefront.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wavefront_api_client.api_client import ApiClient


class AlertAnalyticsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_active_no_target_alert_summary_details(self, start, **kwargs):  # noqa: E501
        """Get Active No Target Alert Summary for a customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_no_target_alert_summary_details(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start time in epoch seconds (required)
        :param int end: End time in epoch seconds, null to use now
        :param int offset: offset for records
        :param int limit: Number of records
        :return: ResponseContainerPagedAlertAnalyticsSummaryDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_active_no_target_alert_summary_details_with_http_info(start, **kwargs)  # noqa: E501
        else:
            (data) = self.get_active_no_target_alert_summary_details_with_http_info(start, **kwargs)  # noqa: E501
            return data

    def get_active_no_target_alert_summary_details_with_http_info(self, start, **kwargs):  # noqa: E501
        """Get Active No Target Alert Summary for a customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_no_target_alert_summary_details_with_http_info(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start time in epoch seconds (required)
        :param int end: End time in epoch seconds, null to use now
        :param int offset: offset for records
        :param int limit: Number of records
        :return: ResponseContainerPagedAlertAnalyticsSummaryDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_active_no_target_alert_summary_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if self.api_client.client_side_validation and ('start' not in params or
                                                       params['start'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start` when calling `get_active_no_target_alert_summary_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/alert/analytics/summary/alerts/noTarget', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseContainerPagedAlertAnalyticsSummaryDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alert_analytics_errors_summary(self, start, **kwargs):  # noqa: E501
        """Get Alert Analytics errors summary  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_analytics_errors_summary(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start time in epoch seconds (required)
        :param int end: End time in epoch seconds, null to use now
        :return: ResponseContainerListAlertErrorGroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alert_analytics_errors_summary_with_http_info(start, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alert_analytics_errors_summary_with_http_info(start, **kwargs)  # noqa: E501
            return data

    def get_alert_analytics_errors_summary_with_http_info(self, start, **kwargs):  # noqa: E501
        """Get Alert Analytics errors summary  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_analytics_errors_summary_with_http_info(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start time in epoch seconds (required)
        :param int end: End time in epoch seconds, null to use now
        :return: ResponseContainerListAlertErrorGroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_analytics_errors_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if self.api_client.client_side_validation and ('start' not in params or
                                                       params['start'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start` when calling `get_alert_analytics_errors_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/alert/analytics/summary/errors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseContainerListAlertErrorGroupInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alert_analytics_summary(self, start, **kwargs):  # noqa: E501
        """Get Alert Analytics Summary for a customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_analytics_summary(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start time in epoch seconds (required)
        :param int end: End time in epoch seconds, null to use now
        :return: ResponseContainerAlertAnalyticsSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alert_analytics_summary_with_http_info(start, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alert_analytics_summary_with_http_info(start, **kwargs)  # noqa: E501
            return data

    def get_alert_analytics_summary_with_http_info(self, start, **kwargs):  # noqa: E501
        """Get Alert Analytics Summary for a customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_analytics_summary_with_http_info(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start time in epoch seconds (required)
        :param int end: End time in epoch seconds, null to use now
        :return: ResponseContainerAlertAnalyticsSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_analytics_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if self.api_client.client_side_validation and ('start' not in params or
                                                       params['start'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start` when calling `get_alert_analytics_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/alert/analytics/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseContainerAlertAnalyticsSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_failed_alert_summary_details(self, start, **kwargs):  # noqa: E501
        """Get Failed Alert Summary Details for a customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_failed_alert_summary_details(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start time in epoch seconds (required)
        :param int end: End time in epoch seconds, null to use now
        :param int offset: offset for records
        :param int limit: Number of records
        :return: ResponseContainerPagedAlertAnalyticsSummaryDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_failed_alert_summary_details_with_http_info(start, **kwargs)  # noqa: E501
        else:
            (data) = self.get_failed_alert_summary_details_with_http_info(start, **kwargs)  # noqa: E501
            return data

    def get_failed_alert_summary_details_with_http_info(self, start, **kwargs):  # noqa: E501
        """Get Failed Alert Summary Details for a customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_failed_alert_summary_details_with_http_info(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start time in epoch seconds (required)
        :param int end: End time in epoch seconds, null to use now
        :param int offset: offset for records
        :param int limit: Number of records
        :return: ResponseContainerPagedAlertAnalyticsSummaryDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_failed_alert_summary_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if self.api_client.client_side_validation and ('start' not in params or
                                                       params['start'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start` when calling `get_failed_alert_summary_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/alert/analytics/summary/alerts/failed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseContainerPagedAlertAnalyticsSummaryDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_no_data_alert_summary_details(self, start, **kwargs):  # noqa: E501
        """Get No Data Alert Summary for a customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_no_data_alert_summary_details(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start time in epoch seconds (required)
        :param int end: End time in epoch seconds, null to use now
        :param int offset: offset for records
        :param int limit: Number of records
        :return: ResponseContainerPagedAlertAnalyticsSummaryDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_no_data_alert_summary_details_with_http_info(start, **kwargs)  # noqa: E501
        else:
            (data) = self.get_no_data_alert_summary_details_with_http_info(start, **kwargs)  # noqa: E501
            return data

    def get_no_data_alert_summary_details_with_http_info(self, start, **kwargs):  # noqa: E501
        """Get No Data Alert Summary for a customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_no_data_alert_summary_details_with_http_info(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start time in epoch seconds (required)
        :param int end: End time in epoch seconds, null to use now
        :param int offset: offset for records
        :param int limit: Number of records
        :return: ResponseContainerPagedAlertAnalyticsSummaryDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'end', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_no_data_alert_summary_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if self.api_client.client_side_validation and ('start' not in params or
                                                       params['start'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start` when calling `get_no_data_alert_summary_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/alert/analytics/summary/alerts/noData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseContainerPagedAlertAnalyticsSummaryDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
